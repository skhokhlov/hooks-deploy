#!/usr/bin/env node

//-----------------

var fs = require('fs');
var http = require('http');
var program = require('commander');
var exec = require('child_process').exec;

program
    .version(require('./package.json').version)
    .option('-c, --config <file ...>', 'configuration file, default: ~/.hooks-deploy.conf')
    .on('--help', function () {
        console.log('  By default program will be run and wait for requests.\n');
        console.log('  More information on https://github.com/skhokhlov/hooks-deploy#readme');
    })
    .parse(process.argv);

var config;

if (program.config) {
    config = JSON.parse(fs.readFileSync(program.config, {encoding: 'utf-8'}));

} else {
    if (fs.existsSync(process.env.HOME + '/.hooks-deploy.conf')) {
        config = JSON.parse(fs.readFileSync(process.env.HOME + '/.hooks-deploy.conf', {encoding: 'utf-8'}));

    } else {
        config = require('./config.json');
        fs.writeFileSync(process.env.HOME + '/.hooks-deploy.conf', JSON.stringify(config), {encoding: 'utf-8'});
    }
}

var hookNames = [];

/**
 * Validating configuration file and creating list of hooks
 */
for (var i = 0; i < config.hooks.length; ++i) {
    if (Boolean(config.hooks[i].name && config.hooks[i].path && config.hooks[i].cmd)) {
        hookNames.push(config.hooks[i].name);

    } else {
        throw new Error('Invalid config file');
    }
}

http.createServer(function (req, res) {
    if (req.method === 'POST') {
        /**
         * body example:
         * {
         *  "name":"foo",
         *  "repository": "https://*",
         *  "branch": "master"
         * }
         */
        var body = '';
        req.on('data', function (chunk) {
            body += String(chunk);
        });

        req.on('end', function () {
            try {
                body = JSON.parse(body);
            } catch (e){
                res.writeHead(400, 'Bad Request');
                res.end('400 Bad Request');
            }

            /**
             * Validating request body and checking availability of hook and doing main actions
             */
            if (Boolean(body.name && body.repository && body.branch && !/\//.test(body.branch)) &&
                hookNames.indexOf(body.name) > -1) {

                var hook = config.hooks[hookNames.indexOf(body.name)];
                var cmd = 'cd {hook.path} && rm -rf {body.branch} ' +
                    '&& git clone {body.repository} {body.branch} -b {body.branch} ' +
                    '&& cd {body.branch}';
                cmd = cmd.replace(new RegExp('{hook.path}', 'g'), hook.path)
                    .replace(new RegExp('{body.repository}', 'g'), body.repository)
                    .replace(new RegExp('{body.branch}', 'g'), body.branch);

                exec(cmd, function (err, stdout, stderr) {
                    if (err || stderr) {
                        res.writeHead(500, 'Internal Server Error');
                        res.end('500 Internal Server Error\n' + stderr);
                    }

                    var pid = getPID(hook.name);
                    console.log(pid);

                    if (pid) {
                        exec('kill ' + pid, function (err, stdout, stderr) {
                            if (err || stderr) {
                                res.writeHead(500, 'Internal Server Error');
                                res.end('500 Internal Server Error\n' + stderr);
                            }

                            var app = exec(hook.cmd, function (err, stdout, stderr) {
                                if (err || stderr) {
                                    res.writeHead(500, 'Internal Server Error');
                                    res.end('500 Internal Server Error\n' + stderr);
                                }

                                setPID(hook.name, app.pid);

                                res.writeHead(200, 'OK');
                                res.end(stdout);
                            });
                        });

                    } else {
                        exec(hook.cmd + ' &', function (err, stdout, stderr) {
                            if (err || stderr) {
                                res.writeHead(500, 'Internal Server Error');
                                res.end('500 Internal Server Error\n' + stderr);
                            }

                            console.log(stdout);

                            res.writeHead(200, 'OK');
                            res.end(stdout);
                        });
                    }

                });

            } else {
                res.writeHead(400, 'Bad Request');
                res.end('400 Bad Request');
            }

        });

    } else {
        res.writeHead(405, 'Method not supported');
        res.end('405 - Method not supported');
    }

})
    .listen(config.port || 7999);

function getPID(name) {
    if (fs.existsSync(process.env.HOME + '/.hooks-deploy.pids.json')) {
        return JSON.parse(fs.readFileSync(process.env.HOME + '/.hooks-deploy.pids.json', {encoding: 'utf-8'}))[name];

    } else {
        return false;
    }
}

function setPID(name, pid) {
    var file;
    if (fs.existsSync(process.env.HOME + '/.hooks-deploy.pids.json')) {
        file = JSON.parse(fs.readFileSync(process.env.HOME + '/.hooks-deploy.pids.json', {encoding: 'utf-8'}));
        file[name] = pid;

        fs.writeFile(process.env.HOME + '/.hooks-deploy.pids.json', JSON.stringify(file), {encoding: 'utf-8'},
            function (err) {
                if (err) {
                    throw new Error(err);
                }
            }
        );

    } else {
        file = {};
        file[name] = pid;
        fs.writeFile(process.env.HOME + '/.hooks-deploy.pids.json', JSON.stringify(file), {encoding: 'utf-8'},
            function (err) {
                if (err) {
                    throw new Error(err);
                }
            }
        );
    }
}
